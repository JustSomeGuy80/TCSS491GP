class MapExport {
    /** @type {MapExport} */
    static TEST_STAGE = new MapExport(
        ...Object.values(
            JSON.parse(
                '{"top":-192,"left":-672,"tiles":[[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1],[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1],[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1],[1,1,1,1,1,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1],[1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1],[1,1,1,1,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1],[1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1],[1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,1,1,1],[1,1,1,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1],[1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1],[1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1],[1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1],[1,1,1,5,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1],[1,1,1,1,1,1,5,0,0,0,0,0,0,0,0,0,0,-1,0,0,1,1,1,1,1],[1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1],[1,1,1,1,1,1,4,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1],[1,1,1,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1],[1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1],[1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1],[1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1],[1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1],[1,1,1,5,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1],[1,1,1,1,1,1,5,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1],[1,1,1,1,1,1,1,1,1,1,1,5,0,0,0,0,0,0,0,0,0,1,1,1,1],[1,1,1,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1],[1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1],[1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1],[1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1],[1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1],[1,1,1,5,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1],[1,1,1,1,1,5,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1],[1,1,1,1,1,1,1,5,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1],[1,1,1,0,0,0,2,1,5,0,0,0,0,0,0,0,0,3,1,0,0,1,1,1,1],[1,1,1,0,0,0,0,2,1,1,1,5,0,0,0,3,1,1,1,0,0,1,1,1,1],[1,1,1,0,0,0,0,0,2,1,1,1,1,1,1,1,1,1,1,0,0,1,1,1,1],[1,1,1,0,0,0,0,0,0,1,1,1,1,1,1,4,0,0,0,0,0,1,1,1,1],[1,1,1,0,0,1,0,0,0,2,1,0,0,0,0,0,0,0,0,0,0,1,1,1,1],[1,1,1,0,0,1,0,0,0,0,2,0,0,0,0,1,0,0,0,0,0,1,1,1,1],[1,1,1,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,1,1,1,1],[1,1,1,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,1,1,1,1],[1,1,1,0,0,1,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,1,1,1],[1,1,1,0,0,1,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,1,1,1],[1,1,1,0,0,1,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,1,1,1],[1,1,1,0,0,1,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,1,1,1],[1,1,1,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,1,1,1,1],[1,1,1,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,1,1,1,1],[1,1,1,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1],[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1],[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1],[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]]}'
            )
        )
    );

    /**
     * @param {number} top
     * @param {number} left
     * @param {number[][]} tiles
     */
    constructor(top, left, tiles) {
        this.top = top;
        this.left = left;
        this.tiles = tiles;
        this.game = null;
    }

    init(game) {
        this.game = game;
        for (const { x, y, tile } of this.#getTiles()) {
            switch (tile) {
                case Tile.DIRT:
                    new ColliderRect(new Vector(x, y), 0, 0, Tile.SIZE, Tile.SIZE, 1, this);
                    break;
            }
        }
    }

    update() {}

    draw(ctx) {
        for (const { x, y, tile } of this.#getTiles()) {
            Tile.drawTile(tile, ctx, new Vector(x, y));
        }
    }

    *#getTiles() {
        for (let xIndex = 0; xIndex < this.tiles.length; xIndex++) {
            for (let yIndex = 0; yIndex < this.tiles[xIndex].length; yIndex++) {
                const x = xIndex * Tile.SIZE - this.game.camera.x;
                const y = yIndex * Tile.SIZE - this.game.camera.y;
                const tile = this.tiles[xIndex][yIndex];

                yield { x, y, tile };
            }
        }
    }
}
